import csv
import glob

def set_type(x, name):
    """ Detects the correct data type of value given its corresponding field name. """
    isfloat = False
    if "PAPI" in name:
        isfloat = True
    elif "[PROCESS]" in name:
        isfloat = True
    elif "usecs" in name:
        isfloat = True
    elif "cycles" in name:
        isfloat = True

    if isfloat == False:
        ret = str(x)
    else:
        ret = float(x)
    return ret


def open_papiex_csv(file , aggregated=False):
    """
    Open a CSV data file generated by papiex and save the data to a dictionary.
    If aggregated is true, appends float data to a list instead of as a single data point.

    Returns a dictionary of the form {<str>:<int/str/float/[float]>} and a list of field names
    """
    csv_dict = {}
    field_names = [] # store keys for easier access during iteration
    with open(file, 'r') as f:
        reader = csv.reader(f)
        for i, row in enumerate(reader):
            for j, col in enumerate(row):
                if i == 0: # parse the header
                    if aggregated:
                        csv_dict[col] = []
                    else:
                        csv_dict[col] = ""
                    field_names.append(col)


                else: # parse the data
                    val = set_type(col, field_names[j])
                    if isinstance(val, float) and aggregated:
                        csv_dict[field_names[j]].append(val)
                    else:
                        csv_dict[field_names[j]] = val
    return csv_dict, field_names


def open_aggregated_csv(file):
    """ Open a CSV file containing a set of aggregated data """
    collection = []
    header = []
    with open(file, 'r') as f:
        reader = csv.reader(f)
        header = next(reader)
        for row in reader:
            d_row = {}
            for i, col in enumerate(row):
                d_row[header[i]] = col
            collection.append(d_row)
    return collection, header


def open_papiex_results_dir(dirpath):
    """
    Iterate over a directory of csv data files, parse the data and append the output to a list.

    Returns a list of dictionaries, and a list of field values.
    """
    collection = []
    for f in glob.glob(dirpath):
        if ".csv" in f:
            csv_dict, field_names = open_papiex_csv(f)
            collection.append(csv_dict)
        else: # skip non-csv files
            continue
    return collection, field_names


def save_csv_from_dict(data, field_names, filename, writemode='w'):
    """ Save a dataset to a unique file """
    with open(filename, writemode, newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=field_names)
        writer.writeheader()
        writer.writerows(data)



def save_as_aggregated_csv(data, field_names, filename, first=False):
    """
    Saves many data sets to the same file.
    Only the header of the first dataset is saved.
    """
    with open(filename, 'a', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=field_names)
        if first: # Only the header of the first data set is needed
            writer.writeheader()
        writer.writerows(data)
